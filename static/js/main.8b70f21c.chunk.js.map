{"version":3,"sources":["services/firebase.js","components/Players.jsx","helpers/utils.js","components/Animation.jsx","components/TimerButton.jsx","pages/Game.jsx","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","auth","db","database","Player","players","Table","striped","map","player","index","key","id","scope","name","totalCorrectGuess","getRandomPlayer","allPlayers","playedPlayers","length","Object","keys","playingPlayer","filter","playerId","noOfPlayers","playerIndex","Math","floor","random","getStatementWisePercentage","statement1Guess","statement2Guess","totalGuess","forEach","currentGuess","totalPlayers","round","parseInt","Animation","props","state","displayName","names","iterator","this","timerId","setInterval","setState","duration","setTimeout","clearInterval","className","Component","TimerButton","timeLeft","prevState","buttonDisabled","disabled","seconds","minutes","Button","color","size","active","onClick","label","Game","hasValidPlayerChecked","updatePlayers","snapshot","snap","val","push","game","pollStarted","sort","player1","player2","hasPlayerSession","find","showLoader","localStorage","removeItem","updateStatements","statements","resultDeclare","some","statement","isLie","handlePlayerNameChange","event","playerName","target","value","handleLogin","a","preventDefault","writeError","ref","child","set","lockedGuess","timestamp","Date","now","setItem","message","handleStatementChange","split","update","isTyping","handleStatementBlur","startPoll","updates","updatedPlayer","console","log","error","handleSubmitLie","guess","playedPlayerIds","currentPlayer","updatedStatements","1","2","newPlayedList","showResult","handleChooseNextPlayer","updateGame","gameStarted","choosingPlayer","randomPlayer","handleGuess","handleSubmitGuess","renderAnimation","renderChosenPlayerPollStartedUI","playerInfo","percentages","ListGroup","ListGroupItem","tag","for","action","type","checked","onChange","Progress","animated","renderChosenPlayerBeforePollStartUI","statement_1","statement_2","Input","onBlur","renderNonChosenPlayerUI","every","alertColor","alertMessage","correctStatement","Alert","renderLoginUI","onSubmit","FormGroup","Label","placeholder","playerSession","getItem","readError","on","ui","Spinner","style","width","height","gameStarter","Jumbotron","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.8b70f21c.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nconst config = {\n  apiKey: \"AIzaSyCJG21FTfLkdbSSffRbCWUkhsUCz8fjFzA\",\n  authDomain: \"personality-2a30d.firebaseapp.com\",\n  databaseURL: \"https://personality-2a30d.firebaseio.com\",\n};\n\nfirebase.initializeApp(config);\nexport const auth = firebase.auth;\nexport const db = firebase.database();\n","import React from \"react\";\nimport { Table } from 'reactstrap';\nexport const Player = ({ players }) => {\n    \n  return (\n      <Table striped>\n        <thead>\n          <tr>\n            <th>Sr.No.</th>\n            <th>Name</th>\n            <th>Correct guesses</th>\n          </tr>\n        </thead>\n        <tbody>\n          {players.map((player, index) => {\n            return (\n              <tr key={player.id}>\n                <th scope=\"row\">{index + 1}</th>\n                <td>{player.name}</td>\n                <td>{player.totalCorrectGuess}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n  );\n};\n","export const getRandomPlayer = (allPlayers, playedPlayers = {}) => {\n  if (allPlayers.length === Object.keys(playedPlayers).length) {\n    return null;\n  }\n  const playingPlayer = allPlayers.filter(\n    (player) => !playedPlayers[player.playerId]\n  );\n  const noOfPlayers = playingPlayer.length;\n  const playerIndex = Math.floor(Math.random() * noOfPlayers);\n  return playingPlayer[playerIndex];\n};\n\nexport const getStatementWisePercentage = (players) => {\n  let statement1Guess = 0;\n  let statement2Guess = 0;\n  let totalGuess = 0;\n  players.forEach((player) => {\n    switch (player.currentGuess) {\n      case \"1\":\n        statement1Guess++;\n        totalGuess++;\n        break;\n      case \"2\":\n        statement2Guess++;\n        totalGuess++;\n        break;\n      default:\n        return;\n    }\n  });\n  const totalPlayers = players.length - 1;\n  let state1P =\n    totalPlayers > 0\n      ? Math.round((100 * parseInt(statement1Guess)) / totalPlayers)\n      : 0;\n  let state2P =\n    totalPlayers > 0\n      ? Math.round((100 * parseInt(statement2Guess)) / totalPlayers)\n      : 0;\n  \n  let tp =\n    totalPlayers > 0\n      ? Math.round((100 * parseInt(totalGuess)) / totalPlayers)\n      : 0;\n  return [state1P, state2P,  tp];\n};\n","import React, { Component } from \"react\";\nexport class Animation extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayName: props.names[0],\n    };\n    this.iterator = 0;\n  }\n\n  componentDidMount() {\n    this.timerId = setInterval(() => {\n      this.setState({\n        displayName: this.props.names[\n          this.iterator++ % this.props.names.length\n        ],\n      });\n    }, 100);\n    if(this.props.duration){\n\n        setTimeout(()=>{\n            clearInterval(this.timerId);\n        }, this.props.duration)\n    }\n  }\n\n  render() {\n    return <div className=\"animated-text\">{this.state.displayName}</div>;\n  }\n}\n","import React, { Component } from \"react\";\nimport { Button } from \"reactstrap\";\nexport class TimerButton extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timeLeft: 120, //seconds\n    };\n    this.timerId = null;\n  }\n\n  componentDidMount() {\n    this.timerId = setInterval(() => {\n      if (this.state.timeLeft < 0) {\n        clearInterval(this.timerId);\n      } else {\n        this.setState((prevState) => {\n          return {\n            timeLeft: prevState.timeLeft - 1,\n          };\n        });\n      }\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    if (this.timerId) {\n      clearInterval(this.timerId);\n    }\n  }\n\n  render() {\n    const buttonDisabled = this.props.disabled || this.state.timeLeft < 0;\n    const seconds = this.state.timeLeft%60;\n    const minutes = Math.floor(this.state.timeLeft/60);\n    return (\n      <Button\n        color=\"primary\"\n        size=\"lg\"\n        active\n        onClick={this.props.onClick}\n        disabled={buttonDisabled}\n      >\n        {this.props.label}\n        {!buttonDisabled && ` in ${minutes}:${seconds}`}\n      </Button>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { db } from \"../services/firebase\";\nimport { Player } from \"../components/Players\";\nimport {\n  Jumbotron,\n  Alert,\n  Button,\n  ListGroup,\n  ListGroupItem,\n  Label,\n  FormGroup,\n  Input,\n  Progress,\n  Spinner,\n} from \"reactstrap\";\nimport { getRandomPlayer, getStatementWisePercentage } from \"../helpers/utils\";\nimport { Animation } from \"../components/Animation\";\nimport { TimerButton } from \"../components/TimerButton\";\n\nconst PLAYER_SESSION = \"player-session-personality\";\nexport class Game extends Component {\n  hasValidPlayerChecked = false;\n  constructor(props) {\n    super(props);\n    const playerSession = localStorage.getItem(PLAYER_SESSION);\n    this.state = {\n      playerName: \"\",\n      playerId: null,\n      readError: null,\n      writeError: null,\n      showLoader: playerSession ? true : false,\n      hasPlayerSession: playerSession,\n\n      statement_1: \"\",\n      statement_2: \"\",\n      guess: null,\n      //firebase\n      players: [],\n      playedPlayerIds: null,\n      currentPlayer: null,\n      statements: null,\n      game: null,\n    };\n  }\n\n  async componentDidMount() {\n    //listen for all the database keys\n    //and update in the state\n    this.setState({ readError: null });\n    try {\n      db.ref(\"players\").on(\"value\", this.updatePlayers);\n      db.ref(\"statements\").on(\"value\", this.updateStatements);\n      db.ref(\"currentPlayer\").on(\"value\", (snapshot) => {\n        const currentPlayer = snapshot.val();\n        this.setState({ currentPlayer, guess: 0 });\n      });\n      db.ref(\"game\").on(\"value\", (snapshot) => {\n        const game = snapshot.val();\n        this.setState({ game });\n      });\n      db.ref(\"playedPlayerIds\").on(\"value\", (snapshot) => {\n        const playedPlayerIds = snapshot.val();\n        this.setState({ playedPlayerIds });\n      });\n    } catch (error) {\n      this.setState({ readError: error.message });\n    }\n  }\n\n  updatePlayers = (snapshot) => {\n    let players = [];\n\n    snapshot.forEach((snap) => {\n      let player = snap.val();\n      players.push(player);\n      if (this.state.game && this.state.game.pollStarted) {\n      }\n    });\n    players = players.sort(\n      (player1, player2) =>\n        parseInt(player2.totalCorrectGuess) -\n        parseInt(player1.totalCorrectGuess)\n    );\n    if (\n      !this.hasValidPlayerChecked &&\n      this.state.hasPlayerSession &&\n      this.state.playerId === null\n    ) {\n      //when all players listener received data\n      //state.hasPlayerSession && state.playerId == null, check if playerSession is in players => only one time check\n      //yes -> update the player id, set loading to false\n      //no -> go to login, clear the session, set hasPlayerSession to null\n      const player = players.find(\n        (player) => player.playerId === this.state.hasPlayerSession\n      );\n      if (player) {\n        this.setState({ playerId: player.playerId, showLoader: false });\n      } else {\n        localStorage.removeItem(PLAYER_SESSION);\n        this.setState({ showLoader: false });\n      }\n      this.hasValidPlayerChecked = true;\n    }\n    this.setState({\n      players,\n    });\n  };\n\n  updateStatements = (snapshot) => {\n    let statements = [];\n    snapshot.forEach((snap) => {\n      statements.push(snap.val());\n    });\n    let resultDeclare = statements.some((statement) => statement.isLie);\n    this.setState({ statements, resultDeclare });\n  };\n  handlePlayerNameChange = (event) => {\n    this.setState({\n      playerName: event.target.value,\n    });\n  };\n\n  handleLogin = async (event) => {\n    //create playerid -> validate not null\n    //store it in firebase\n    //store it in session\n    //update the playerId\n    event.preventDefault();\n    this.setState({ writeError: null });\n    try {\n      const playerId = db.ref().child(\"players\").push().key;\n      if (playerId) {\n        await db.ref(\"players/\" + playerId).set({\n          playerId: playerId,\n          name: this.state.playerName,\n          currentGuess: 0,\n          totalCorrectGuess: 0,\n          lockedGuess: false,\n          timestamp: Date.now(),\n        });\n\n        localStorage.setItem(PLAYER_SESSION, playerId);\n        this.setState({ playerName: \"\", playerId, hasPlayerSession: playerId });\n      } else {\n        this.setState({ writeError: \"Please try again...\" });\n      }\n    } catch (error) {\n      this.setState({ writeError: error.message });\n    }\n  };\n\n  handleStatementChange = async (event) => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    });\n    //also set isTyping to true -> only once do it based on value.length ==1\n    if (value.length === 1) {\n      this.setState({ writeError: null });\n      const id = name.split(\"_\")[1];\n      try {\n        await db.ref(\"statements/\" + id).update({ isTyping: true });\n      } catch (error) {\n        this.setState({ writeError: error.message });\n      }\n    }\n  };\n  handleStatementBlur = async (event) => {\n    //save value to the firebase\n    //set typing to false\n    const { name, value } = event.target;\n    this.setState({ writeError: null });\n    const id = name.split(\"_\")[1];\n    try {\n      await db.ref(\"statements/\" + id).update({ id, value, isTyping: false });\n    } catch (error) {\n      this.setState({ writeError: error.message });\n    }\n  };\n\n  startPoll = async () => {\n    //set pollStarted = true\n    let updates = {};\n    this.setState({ writeError: null });\n    const { game, players, playerId } = this.state;\n    try {\n      updates[\"/game\"] = { ...game, pollStarted: true };\n      players.forEach((player) => {\n        const updatedPlayer = { ...player, lockedGuess: false };\n        if (player.playerId && player.playerId != playerId) {\n          updates[\"/players/\" + player.playerId] = updatedPlayer;\n        } else {\n          console.log(\"wrong player\", player);\n        }\n      });\n      db.ref().update(updates);\n    } catch (error) {\n      this.setState({ writeError: error.message });\n    }\n  };\n\n  handleSubmitLie = () => {\n    //update all the statement true or false\n    //for all the user, update the score board\n    this.setState({ writeError: null });\n    try {\n      const {\n        playerId,\n        players,\n        guess,\n        playedPlayerIds,\n        currentPlayer,\n        statements,\n        game,\n      } = this.state;\n      const updatedStatements = {\n        1: { ...statements[0], isLie: guess == 1 },\n        2: { ...statements[1], isLie: guess == 2 },\n      };\n      let updates = {};\n      updates[\"/statements\"] = updatedStatements;\n      players.forEach((player) => {\n        const totalCorrectGuess =\n          player.currentGuess == guess\n            ? parseInt(player.totalCorrectGuess) + 1\n            : player.totalCorrectGuess;\n        const updatedPlayer = { ...player, totalCorrectGuess };\n        if (player.playerId && player.playerId != playerId) {\n          updates[\"/players/\" + player.playerId] = updatedPlayer;\n        } else {\n          console.log(\"wrong player\", player);\n        }\n      });\n      let newPlayedList = {\n        ...playedPlayerIds,\n        [currentPlayer.playerId]: true,\n      };\n      updates[\"playedPlayerIds\"] = newPlayedList;\n      updates[\"game\"] = { ...game, showResult: true };\n      db.ref().update(updates);\n    } catch (error) {\n      this.setState({ writeError: error.message });\n    }\n  };\n\n  handleChooseNextPlayer = () => {\n    //choosingPlayer = true,\n    //remove the statements\n    //pollStarted = false\n    //showResult = false\n    //remove every players current guess\n    //set timer of 30 sec\n    //get random player and set as current player, set choosingPlayer = false\n\n    this.setState({ writeError: null });\n    try {\n      const { players, game } = this.state;\n      let updateGame = {};\n      updateGame[\"/game\"] = {\n        ...game,\n        gameStarted: true,\n        choosingPlayer: true,\n        showResult: false,\n      };\n\n      updateGame[\"/currentPlayer\"] = null;\n      db.ref().update(updateGame);\n\n      setTimeout(async () => {\n        const playedPlayers = this.state.playedPlayerIds\n          ? this.state.playedPlayerIds\n          : {};\n        const randomPlayer = getRandomPlayer(this.state.players, playedPlayers);\n        this.setState({ writeError: null });\n        let updates = {};\n        try {\n          // await db.ref(\"currentPlayer\").set(randomPlayer);\n\n          //deepak\n          updates[\"/currentPlayer\"] = randomPlayer;\n          updates[\"/game\"] = {\n            ...game,\n            gameStarted: true,\n            showResult: false,\n            choosingPlayer: false,\n            pollStarted: true,\n          };\n          players.forEach((player) => {\n            const updatedPlayer = {\n              ...player,\n              currentGuess: null,\n              lockedGuess: false,\n            };\n            if (player.playerId) {\n              updates[\"/players/\" + player.playerId] = updatedPlayer;\n            } else {\n              console.log(\"wrong player\", player);\n            }\n          });\n\n          db.ref().update(updates);\n        } catch (error) {\n          this.setState({ writeError: error.message });\n        }\n      }, 5000);\n    } catch (error) {\n      this.setState({ writeError: error.message });\n    }\n  };\n\n  handleGuess = (event) => {\n    this.setState({\n      guess: event.target.value,\n    });\n  };\n\n  handleSubmitGuess = async () => {\n    //update players guess and lock it\n    const { guess, playerId } = this.state;\n    this.setState({ writeError: null });\n    try {\n      await db.ref(\"players/\" + playerId).update({\n        currentGuess: guess,\n        lockedGuess: true,\n      });\n    } catch (error) {\n      this.setState({ writeError: error.message });\n    }\n  };\n\n  renderAnimation = (players) => {\n    return (\n      <div>\n        <Animation\n          names={players.map((player) => player.name)}\n          duration={5000}\n        />\n      </div>\n    );\n  };\n\n  renderChosenPlayerPollStartedUI = (\n    playerId,\n    playerInfo,\n    currentPlayer,\n    game,\n    statements,\n    guess,\n    players\n  ) => {\n    //show 3 statements based on statements array from firebase\n    //show the vote percentage below each statement if showResult == true\n    //show actual poll, total votes\n    //submit Lie button -> 50% vote , handleSubmitLie\n    let percentages = [0, 0, 0];\n    if (players.length > 0 && game.pollStarted) {\n      percentages = getStatementWisePercentage(players);\n    }\n    return (\n      <>\n        <p>{currentPlayer.name}'s personality looks like?</p>\n        <ListGroup>\n          {statements.map((statement) => {\n            return (\n              <ListGroupItem\n                active={guess == statement.id}\n                key={statement.id}\n                tag=\"label\"\n                for={statement.id}\n                action\n                disabled={game.showResult}\n              >\n                <input\n                  type=\"radio\"\n                  id={statement.id}\n                  name=\"guess\"\n                  value={statement.id}\n                  checked={guess == statement.id}\n                  onChange={this.handleGuess}\n                  className=\"invisible\"\n                ></input>\n                <label for={statement.id}>{statement.value}</label>\n                {game.showResult && (\n                  <div className=\"progress-wrapper\">\n                    <Progress\n                      animated\n                      color=\"info\"\n                      value={percentages[parseInt(statement.id) - 1]}\n                    >\n                      {percentages[parseInt(statement.id) - 1]}%/\n                    </Progress>\n                  </div>\n                )}\n              </ListGroupItem>\n            );\n          })}\n        </ListGroup>\n        <div className=\"total-guesses\">\n          <div>Total guesses:</div>\n          <Progress animated color=\"info\" value={percentages[2]}>\n            {percentages[2]}%\n          </Progress>\n        </div>\n        {!game.showResult && (\n          <Button\n            color=\"primary\"\n            size=\"lg\"\n            active\n            onClick={this.handleSubmitLie}\n          >\n            Reveal\n          </Button>\n        )}\n        {game.showResult && (\n          <Button\n            color=\"primary\"\n            size=\"lg\"\n            active\n            onClick={this.handleChooseNextPlayer}\n          >\n            Choose the next player\n          </Button>\n        )}\n      </>\n    );\n  };\n\n  renderChosenPlayerBeforePollStartUI = (statement_1, statement_2) => {\n    //show 3 text boxes, handleStatementChange, handleStatementBlur\n    //show button in disabled state till all 3 statements are there, startPoll\n    return (\n      <>\n        {\" \"}\n        <p>What are you statements ?</p>\n        <ListGroup>\n          <ListGroupItem tag=\"label\" for=\"1\" action>\n            <Input\n              type=\"text\"\n              onChange={this.handleStatementChange}\n              onBlur={this.handleStatementBlur}\n              name=\"statement_1\"\n              value={statement_1}\n            />\n          </ListGroupItem>\n          <ListGroupItem tag=\"label\" for=\"2\" action>\n            <Input\n              type=\"text\"\n              onChange={this.handleStatementChange}\n              onBlur={this.handleStatementBlur}\n              name=\"statement_2\"\n              value={statement_2}\n            />\n          </ListGroupItem>\n        </ListGroup>\n        <Button\n          color=\"primary\"\n          size=\"lg\"\n          active\n          onClick={this.startPoll}\n          disabled={statement_1 === \"\" || statement_2 === \"\"}\n        >\n          Start Guess\n        </Button>\n      </>\n    );\n  };\n\n  renderNonChosenPlayerUI = (\n    playerId,\n    playerInfo,\n    currentPlayer,\n    game,\n    statements,\n    guess,\n    players\n  ) => {\n    //this is rest player screen\n    //show result, show the result\n    //show 3 statements based on statements array from firebase\n    //if isTyping show typing...\n    //show the vote percentage below each statement if showResult == true\n    //if game.pollStarted === true show the button -> handleSubmitGuess\n    const justStartedGame = statements.every(\n      (statement) => statement.value == \"\"\n    );\n    if (justStartedGame) {\n      return <div className=\"chosen-player-name\">{currentPlayer.name}</div>;\n    }\n    let alertColor = \"\";\n    let alertMessage = \"\";\n    let percentages = [0, 0, 0];\n    if (game.showResult) {\n      const correctStatement = statements.find((statement) => statement.isLie);\n      if (correctStatement && playerInfo.currentGuess == correctStatement.id) {\n        alertColor = \"success\";\n        alertMessage = \"Great.....you guessed it!\";\n      } else {\n        alertColor = \"danger\";\n        alertMessage = \"Better luck next time!\";\n      }\n      percentages = getStatementWisePercentage(players);\n    }\n    return (\n      <>\n        {game.showResult && <Alert color={alertColor}>{alertMessage}</Alert>}\n        <p>{currentPlayer.name}'s personality looks like?</p>\n        <ListGroup>\n          {statements.map((statement) => {\n            return (\n              <ListGroupItem\n                active={guess == statement.id}\n                key={statement.id}\n                tag=\"label\"\n                for={statement.id}\n                action\n                color={game.showResult && statement.isLie ? \"success\" : \"none\"}\n                disabled={\n                  (currentPlayer && currentPlayer.playerId === playerId) ||\n                  (playerInfo ? playerInfo.lockedGuess : false)\n                }\n              >\n                <input\n                  type=\"radio\"\n                  id={statement.id}\n                  name=\"guess\"\n                  value={statement.id}\n                  checked={guess == statement.id}\n                  onChange={this.handleGuess}\n                  className=\"invisible\"\n                ></input>\n                <label for={statement.id}>\n                  {statement.isTyping ? `typing...` : statement.value}\n                </label>\n                {game.showResult && (\n                  <div className=\"progress-wrapper\">\n                    <Progress\n                      animated\n                      color=\"info\"\n                      value={percentages[parseInt(statement.id) - 1]}\n                    >\n                      {percentages[parseInt(statement.id) - 1]}%\n                    </Progress>\n                  </div>\n                )}\n              </ListGroupItem>\n            );\n          })}\n        </ListGroup>\n        <TimerButton\n          onClick={this.handleSubmitGuess}\n          disabled={\n            playerInfo ? playerInfo.lockedGuess || !game.pollStarted || game.showResult : false\n          }\n          label={\n            playerInfo && playerInfo.lockedGuess && game.pollStarted\n              ? `Your guess is submitted`\n              : `Submit Guess`\n          }\n        />\n        {/* <Button\n          color=\"primary\"\n          size=\"lg\"\n          active\n          onClick={this.handleSubmitGuess}\n          disabled={\n            playerInfo ? playerInfo.lockedGuess || !game.pollStarted : false\n          }\n        >\n          {playerInfo && playerInfo.lockedGuess && game.pollStarted\n            ? `Your guess is submitted`\n            : `Submit Guess`}\n        </Button> */}\n      </>\n    );\n  };\n\n  renderLoginUI = (playerName, writeError) => {\n    return (\n      <form onSubmit={this.handleLogin}>\n        <FormGroup>\n          <Label for=\"userName\">What is your good name?</Label>\n          <Input\n            type=\"text\"\n            name=\"name\"\n            id=\"userName\"\n            placeholder=\"Name\"\n            onChange={this.handlePlayerNameChange}\n            value={playerName}\n          />\n        </FormGroup>\n\n        {writeError ? <p>{writeError}</p> : null}\n\n        <Button\n          color=\"primary\"\n          size=\"lg\"\n          active\n          type=\"submit\"\n          disabled={!playerName}\n        >\n          Start Playing\n        </Button>\n      </form>\n    );\n  };\n  render() {\n    const {\n      showLoader,\n      players,\n      hasPlayerSession,\n      playerId,\n      playerName,\n      writeError,\n      game,\n      guess,\n      currentPlayer,\n      statements,\n      statement_1,\n      statement_2,\n      playedPlayerIds,\n    } = this.state;\n\n    let ui;\n    if (showLoader) {\n      ui = (\n        <div className=\"loader\">\n          <Spinner style={{ width: \"5rem\", height: \"5rem\" }} />\n        </div>\n      );\n    } else {\n      const playerInfo = players.find((player) => player.playerId === playerId);\n      if (hasPlayerSession && playerId) {\n        //state.hasPlayerSession and playerId -> valid logged in user\n        if (game && game.gameStarted) {\n          //game.choosingPlayer === true && show the animation\n          if (game.choosingPlayer) {\n            ui = this.renderAnimation(players);\n          } else {\n            if (currentPlayer !== null && currentPlayer.playerId === playerId) {\n              if (game.pollStarted) {\n                ui = this.renderChosenPlayerPollStartedUI(\n                  playerId,\n                  playerInfo,\n                  currentPlayer,\n                  game,\n                  statements,\n                  guess,\n                  players\n                );\n              } else {\n                ui = this.renderChosenPlayerBeforePollStartUI(\n                  statement_1,\n                  statement_2\n                );\n              }\n            } else if (currentPlayer) {\n              ui = this.renderNonChosenPlayerUI(\n                playerId,\n                playerInfo,\n                currentPlayer,\n                game,\n                statements,\n                guess,\n                players\n              );\n            } else {\n              if (\n                playedPlayerIds &&\n                players.length === Object.keys(playedPlayerIds).length\n              ) {\n                ui = \"Game Over!\";\n              } else {\n                ui = (\n                  <Button\n                    color=\"primary\"\n                    size=\"lg\"\n                    active\n                    onClick={this.handleChooseNextPlayer}\n                  >\n                    Lets give it one more try\n                  </Button>\n                );\n              }\n            }\n          }\n        } else {\n          if (currentPlayer === null && game && game.gameStarter === playerId) {\n            ui = (\n              <Button\n                color=\"primary\"\n                size=\"lg\"\n                active\n                onClick={this.handleChooseNextPlayer}\n              >\n                Start Game\n              </Button>\n            );\n          } else {\n            ui = <div>Game will begin soon...</div>;\n          }\n        }\n      } else {\n        ui = this.renderLoginUI(playerName, writeError);\n      }\n    }\n\n    return (\n      <Jumbotron className=\"admin-wrapper\">\n        <div className=\"statement-wrapper\">{ui}</div>\n        {hasPlayerSession && playerId && (\n          <div className=\"players-list\">\n            <Player players={this.state.players} />\n          </div>\n        )}\n      </Jumbotron>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { Alert } from \"reactstrap\";\nimport { Game } from \"./pages/Game\";\n\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nfunction App() {\n  return (\n    <div className=\"container-fluid\">\n      <Alert color=\"primary\">\n        <h1>Welcome to Frontdoor's Cross Functional Team Game zone! </h1>\n      </Alert>\n      <Router>\n        <Switch>\n          <Route exact path=\"/personality\" component={Game}></Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}